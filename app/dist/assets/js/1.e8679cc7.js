(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{602:function(e,t,s){var n;void 0===(n=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.conf={comments:{lineComment:"--",blockComment:["--[[","]]"]},brackets:[["{","}"],["[","]"],["(",")"],["do","end"],["then","end"]],autoClosingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],surroundingPairs:[{open:"{",close:"}"},{open:"[",close:"]"},{open:"(",close:")"},{open:'"',close:'"'},{open:"'",close:"'"}],folding:{markers:{start:new RegExp("^\\s*//\\s*(?:(?:#?region\\b)|(?:<editor-fold\\b))"),end:new RegExp("^\\s*//\\s*(?:(?:#?endregion\\b)|(?:</editor-fold>))")}}},t.language={defaultToken:"",tokenPostfix:".lua",keywords:["and","break","do","else","elseif","end","false","for","function","goto","if","in","local","nil","not","or","repeat","return","then","true","until","while"],brackets:[{token:"delimiter.bracket",open:"{",close:"}"},{token:"delimiter.array",open:"[",close:"]"},{token:"delimiter.parenthesis",open:"(",close:")"}],globals:["print","syn_websocket_send","firesignal","makefolder","syn_io_append","is_protosmasher_caller","clonefunction","setrawmetatable","syn_mouse2press","debug","getconstants","getproto","profilebegin","traceback","getstack","setmetatable","getmetatable","getfenv","getupvalue","getupvalues","getlocals","getlocal","setupvaluename","getconstant","getprotos","setstack","setproto","profileend","setlocal","validlevel","setupvalue","setconstant","getregistry","getinfo","syn_io_delfolder","getrawmetatable","getinstancefromstate","syn_io_makefolder","gethiddenprop","setfflag","gethiddenprops","getcallingscript","sethiddenprop","getrenv","getstates","get_instances","newcclosure","gethiddenproperties","getspecialinfo","isluau","shared","decompile","loadstring","getprotos","syn_io_isfolder","hookfunction","isfile","getproto","print","isrbxactive","rconsoleinfo","make_readonly","getstack","rconsolename","unlockmodulescript","getupvalue","syn_getgc","syn_mouse2release","setproto","mouse1click","syn_io_read","setupvalue","syn_io_delfile","gethiddenproperty","getscripts","rconsoleerr","dumpstring","keypress","syn_mousescroll","syn_crypt_derive","syn_mouse1click","get_scripts","rconsoleclear","getlocals","is_redirection_enabled","syn_context_set","syn_keyrelease","syn_io_listdir","isreadonly","mouse2click","getinfo","sethiddenproperty","writefile","loadfile","getconstant","syn_setfflag","syn_getloadedmodules","setsimulationradius","warn","is_synapse_function","getscriptclosure","getproperties","getconnections","checkcaller","getprops","require","rconsoleprint","get_nil_instances","getnilinstances","setreadonly","bit","bdiv","badd","rshift","band","bor","bnot","bmul","bswap","arshift","tobit","ror","rol","lshift","tohex","bxor","bsub","syn","crypt","encrypt","custom","decrypt","hash","encrypt","base64","encode","decode","decrypt","derive","random","hash","secrun","is_beta","secure_call","cache_replace","get_thread_identity","request","protect_gui","cache_invalidate","queue_on_teleport","is_cached","set_thread_identity","write_clipboard","create_secure_function","crypto","encrypt","custom","decrypt","hash","encrypt","base64","encode","decode","decrypt","derive","random","hash","websocket","connect","unprotect_gui","run_secure_function","syn_getsenv","syn_io_isfile","syn_crypt_encrypt","setclipboard","setlocal","syn_mouse1press","syn_newcclosure","validfgwindow","saveinstance","getinstances","getconstants","getloadedmodules","firetouchinterest","readbinarystring","_G","setconstant","isnetworkowner","printconsole","Drawing","Fonts","UI","Monospace","Plex","System","new","getlocal","delfile","messagebox","mouse1release","setnamecallmethod","syn_getreg","syn_dumpstring","syn_mousemoverel","get_loaded_modules","replaceclosure","hookfunc","readfile","get_calling_script","delfolder","syn_getcallingscript","keyrelease","syn_islclosure","XPROTECT","appendfile","isfolder","listfiles","getcallstack","syn_websocket_connect","syn_crypt_hash","syn_websocket_close","is_protosmasher_closure","syn_checkcaller","syn_mouse2click","mousemoverel","mousescroll","syn_mouse1release","mousemoveabs","islclosure","rconsolewarn","getstateenv","syn_clipboard_set","syn_crypt_decrypt","syn_crypt_b64_encode","mouse2release","mouse2press","syn_getmenv","syn_crypt_b64_decode","getpropvalue","syn_getrenv","syn_getgenv","mouse1press","is_lclosure","getgc","syn_keypress","getpointerfromstate","getnamecallmethod","setscriptable","syn_decompile","syn_mousemoveabs","setpropvalue","rconsoleinputasync","getsenv","syn_crypt_random","fireclickdetector","make_writeable","rconsoleinput","getmenv","getreg","syn_io_write","getgenv","messageboxasync","getupvalues","setstack","syn_getinstances","syn_context_get","syn_isactive","DockWidgetPluginGuiInfo","new","warn","CFrame","fromMatrix","fromAxisAngle","fromOrientation","fromEulerAnglesXYZ","Angles","fromEulerAnglesYXZ","new","gcinfo","os","clock","difftime","time","date","tick","bit32","band","extract","bor","bnot","arshift","rshift","rrotate","replace","lshift","lrotate","btest","bxor","pairs","NumberSequence","new","assert","tonumber","Color3","fromHSV","toHSV","fromRGB","new","Enum","Delay","Stats","_G","settings","UserSettings","coroutine","resume","yield","running","status","wrap","create","isyieldable","NumberRange","new","PhysicalProperties","new","PluginManager","Ray","new","NumberSequenceKeypoint","new","Version","Vector2","new","Game","delay","spawn","unpack","string","split","match","gmatch","upper","gsub","format","lower","sub","pack","rep","char","packsize","reverse","byte","unpack","len","find","CellId","new","ypcall","shared","version","print","stats","printidentity","UDim2","fromOffset","fromScale","new","table","pack","move","insert","getn","foreachi","maxn","foreach","concat","unpack","find","create","sort","remove","TweenInfo","new","loadstring","require","Vector3","FromNormalId","FromAxis","fromAxis","fromNormalId","new","Workspace","Vector3int16","new","setmetatable","next","Wait","wait","Instance","new","ipairs","elapsedTime","time","rawequal","Vector2int16","new","collectgarbage","game","newproxy","Spawn","PluginDrag","new","Region3","new","utf8","offset","codepoint","nfdnormalize","char","codes","len","graphemes","nfcnormalize","charpattern","xpcall","tostring","rawset","PathWaypoint","new","DateTime","fromUnixTimestamp","now","fromIsoDate","fromUnixTimestampMillis","fromLocalTime","fromUniversalTime","Random","new","typeof","workspace","RaycastParams","new","math","log","ldexp","rad","cosh","random","frexp","tanh","floor","max","sqrt","modf","huge","pow","atan","tan","cos","sign","clamp","log10","noise","acos","abs","pi","sinh","asin","min","deg","fmod","randomseed","atan2","ceil","sin","exp","getfenv","pcall","ColorSequenceKeypoint","new","ColorSequence","new","type","Region3int16","new","ElapsedTime","select","getmetatable","_VERSION","rawget","Faces","new","Rect","new","BrickColor","Blue","White","Yellow","Red","Gray","palette","New","Black","Green","Random","DarkGray","random","new","setfenv","UDim","new","Axes","new","error","debug","loadmodule","traceback","profileend","profilebegin"],operators:["+","-","*","/","%","^","#","==","~=","<=",">=","<",">","=",";",":",",",".","..","..."],symbols:/[=><!~?:&|+\-*\/\^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,tokenizer:{root:[[/[a-zA-Z_]\w*/,{cases:{"@keywords":{token:"keyword.$0"},"@globals":{token:"global"},"@default":"identifier"}}],{include:"@whitespace"},[/(,)(\s*)([a-zA-Z_]\w*)(\s*)(:)(?!:)/,["delimiter","","key","","delimiter"]],[/({)(\s*)([a-zA-Z_]\w*)(\s*)(:)(?!:)/,["@brackets","","key","","delimiter"]],[/[{}()\[\]]/,"@brackets"],[/@symbols/,{cases:{"@operators":"delimiter","@default":""}}],[/\d*\.\d+([eE][\-+]?\d+)?/,"number.float"],[/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/,"number.hex"],[/\d+?/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/"/,"string",'@string."'],[/'/,"string","@string.'"]],whitespace:[[/[ \t\r\n]+/,""],[/--\[([=]*)\[/,"comment","@comment.$1"],[/--.*$/,"comment"]],comment:[[/[^\]]+/,"comment"],[/\]([=]*)\]/,{cases:{"$1==$S2":{token:"comment",next:"@pop"},"@default":"comment"}}],[/./,"comment"]],string:[[/[^\\"']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/["']/,{cases:{"$#==$S2":{token:"string",next:"@pop"},"@default":"string"}}]]}}}.apply(t,[s,t]))||(e.exports=n)}}]);